[{"D:\\MyWebstorm\\react-rbi-website-admin\\src\\index.js":"1","D:\\MyWebstorm\\react-rbi-website-admin\\src\\App.js":"2","D:\\MyWebstorm\\react-rbi-website-admin\\src\\reportWebVitals.js":"3","D:\\MyWebstorm\\react-rbi-website-admin\\src\\redux\\store.js":"4","D:\\MyWebstorm\\react-rbi-website-admin\\src\\view\\login\\Login.js":"5","D:\\MyWebstorm\\react-rbi-website-admin\\src\\view\\Error\\ErrorPage.js":"6","D:\\MyWebstorm\\react-rbi-website-admin\\src\\view\\Layouts\\Layout.js":"7","D:\\MyWebstorm\\react-rbi-website-admin\\src\\redux\\reducer.js":"8","D:\\MyWebstorm\\react-rbi-website-admin\\src\\service\\Interceptor.js":"9","D:\\MyWebstorm\\react-rbi-website-admin\\src\\service\\sessionStorage.js":"10","D:\\MyWebstorm\\react-rbi-website-admin\\src\\service\\Apis.js":"11","D:\\MyWebstorm\\react-rbi-website-admin\\src\\view\\Rule\\Rule.js":"12","D:\\MyWebstorm\\react-rbi-website-admin\\src\\view\\Column\\Column.js":"13","D:\\MyWebstorm\\react-rbi-website-admin\\src\\view\\Home\\Home.js":"14","D:\\MyWebstorm\\react-rbi-website-admin\\src\\redux\\actionType.js":"15","D:\\MyWebstorm\\react-rbi-website-admin\\src\\redux\\action.js":"16","D:\\MyWebstorm\\react-rbi-website-admin\\src\\service\\tools.js":"17","D:\\MyWebstorm\\react-rbi-website-admin\\src\\components\\ModalHeader.js":"18","D:\\MyWebstorm\\react-rbi-website-admin\\src\\components\\Uploads.js":"19","D:\\MyWebstorm\\react-rbi-website-admin\\src\\view\\RuleAction\\RuleAction.js":"20","D:\\MyWebstorm\\react-rbi-website-admin\\src\\view\\NewsType\\NewsType.js":"21","D:\\MyWebstorm\\react-rbi-website-admin\\src\\view\\FlinkType\\FlinkType.js":"22"},{"size":534,"mtime":1613010063422,"results":"23","hashOfConfig":"24"},{"size":1146,"mtime":1613189312481,"results":"25","hashOfConfig":"24"},{"size":375,"mtime":1613010063434,"results":"26","hashOfConfig":"24"},{"size":257,"mtime":1613010063432,"results":"27","hashOfConfig":"24"},{"size":2084,"mtime":1613010063486,"results":"28","hashOfConfig":"24"},{"size":372,"mtime":1613010063458,"results":"29","hashOfConfig":"24"},{"size":4193,"mtime":1613190284660,"results":"30","hashOfConfig":"24"},{"size":506,"mtime":1613010063431,"results":"31","hashOfConfig":"24"},{"size":2892,"mtime":1613010063439,"results":"32","hashOfConfig":"24"},{"size":695,"mtime":1613010063447,"results":"33","hashOfConfig":"24"},{"size":1963,"mtime":1613188496419,"results":"34","hashOfConfig":"24"},{"size":9054,"mtime":1613010063479,"results":"35","hashOfConfig":"24"},{"size":10901,"mtime":1613010063453,"results":"36","hashOfConfig":"24"},{"size":438,"mtime":1613010063463,"results":"37","hashOfConfig":"24"},{"size":235,"mtime":1613010063429,"results":"38","hashOfConfig":"24"},{"size":440,"mtime":1613010063428,"results":"39","hashOfConfig":"24"},{"size":1675,"mtime":1613010063447,"results":"40","hashOfConfig":"24"},{"size":360,"mtime":1613010063406,"results":"41","hashOfConfig":"24"},{"size":2545,"mtime":1613010063418,"results":"42","hashOfConfig":"24"},{"size":5401,"mtime":1613188496427,"results":"43","hashOfConfig":"24"},{"size":4938,"mtime":1613191685547,"results":"44","hashOfConfig":"24"},{"size":5026,"mtime":1613191904793,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"oi09wi",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"48"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"74","usedDeprecatedRules":"48"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"48"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"48"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\MyWebstorm\\react-rbi-website-admin\\src\\index.js",[],["95","96"],"D:\\MyWebstorm\\react-rbi-website-admin\\src\\App.js",[],"D:\\MyWebstorm\\react-rbi-website-admin\\src\\reportWebVitals.js",[],"D:\\MyWebstorm\\react-rbi-website-admin\\src\\redux\\store.js",[],"D:\\MyWebstorm\\react-rbi-website-admin\\src\\view\\login\\Login.js",[],"D:\\MyWebstorm\\react-rbi-website-admin\\src\\view\\Error\\ErrorPage.js",[],"D:\\MyWebstorm\\react-rbi-website-admin\\src\\view\\Layouts\\Layout.js",[],"D:\\MyWebstorm\\react-rbi-website-admin\\src\\redux\\reducer.js",[],"D:\\MyWebstorm\\react-rbi-website-admin\\src\\service\\Interceptor.js",[],"D:\\MyWebstorm\\react-rbi-website-admin\\src\\service\\sessionStorage.js",[],"D:\\MyWebstorm\\react-rbi-website-admin\\src\\service\\Apis.js",[],"D:\\MyWebstorm\\react-rbi-website-admin\\src\\view\\Rule\\Rule.js",["97","98"],"/**\r\n * desc：  权限管理\r\n * author：DestinyJun\r\n * date：  2020/4/21 17:01\r\n */\r\nimport React, {Component} from 'react';\r\nimport './Rule.scss';\r\nimport {Button, Table, Space, Modal, Form, Input, InputNumber, Radio, Select, Tree} from \"antd\";\r\nimport {post} from \"../../service/Interceptor\";\r\nimport {RuleApi} from \"../../service/Apis\";\r\nimport {reverseTree, transformTree} from \"../../service/tools\";\r\nimport {ModalHeader} from \"../../components/ModalHeader\";\r\nimport axios from \"axios\";\r\nconst { Option } = Select;\r\n\r\nexport class Rule extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      rule_list: [],\r\n      rule_action_list: [],\r\n      rule_visible: false,\r\n      rule_loading: false,\r\n      rule_tree_visible: false,\r\n      rule_tree_name: '点击选择父级权限',\r\n      rule_id: null,\r\n    };\r\n    // 表单模型\r\n    this.rule_formRef = React.createRef();\r\n    // 表头信息定义\r\n    this.rule_column = [\r\n      {\r\n        title: '权限名称',\r\n        dataIndex: 'rule_name',\r\n      },\r\n      {\r\n        title: '权限标识名称',\r\n        dataIndex: 'action_name',\r\n      },\r\n      {\r\n        title: '权限标识编码',\r\n        dataIndex: 'action_code',\r\n        key: 'action_code',\r\n      },\r\n      {\r\n        title: '创建时间',\r\n        dataIndex: 'create_time',\r\n      },\r\n      {\r\n        title: '操作',\r\n        render: (item) => {\r\n          return(\r\n            <Space size=\"middle\">\r\n              <Button type={'primary'} style={{background: '#00E3CA',borderColor: '#00E3CA'}} onClick={this.ruleUpdate.bind(this,item)}>编辑</Button>\r\n              <Button type={'primary'} danger onClick={this.ruleDel.bind(this,item)}>删除</Button>\r\n            </Space>\r\n          )\r\n        },\r\n      }\r\n    ]\r\n    // 校验信息定义\r\n    this.rule_validateMessages = {\r\n      required: '${label}是必填项!',\r\n      types: {\r\n        number: '${label}必须是数字',\r\n      },\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    axios.all([\r\n      post(RuleApi.GET_RULE_TREE, {}),\r\n      post(RuleApi.GET_RULE_ACTION, {}),\r\n    ])\r\n      .then(res => {\r\n        this.setState({\r\n          rule_list: transformTree(reverseTree(res[0].data).map(item => ({...item,key: item.id}))),\r\n          rule_action_list: [...res[1].data],\r\n        }, () => {\r\n          // console.log(reverseTree[this.state.rule_list]);\r\n        })\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      })\r\n  }\r\n  // 初始化树结构\r\n  ruleInit() {\r\n    post(RuleApi.GET_RULE_TREE, {})\r\n      .then(res => {\r\n        this.setState({\r\n          rule_list: transformTree(reverseTree(res.data).map(item => ({...item,key: item.id}))),\r\n          rule_visible: false,\r\n        })\r\n      })\r\n  }\r\n  // 添加/修改\r\n  ruleSave () {\r\n    let url,data;\r\n    if (!this.state.rule_id) {\r\n      url = RuleApi.ADD_RULE;\r\n      data = this.rule_formRef.current.getFieldsValue()\r\n    } else {\r\n      url = RuleApi.UPDATE_RULE;\r\n      data = this.rule_formRef.current.getFieldsValue();\r\n      data['id'] = this.state.rule_id;\r\n    }\r\n    post(url, data)\r\n      .then(() => {\r\n        this.ruleInit();\r\n      })\r\n      .catch(err => {})\r\n  }\r\n  // 删除\r\n  ruleDel (item) {\r\n    if (window.confirm('确定要删除么?')) {\r\n      post(RuleApi.DEL_RULE, {id: item.id})\r\n        .then(() => {\r\n          this.ruleInit();\r\n        })\r\n        .catch(err => {})\r\n    }\r\n  }\r\n  // 修改\r\n  ruleUpdate(item) {\r\n    this.setState({\r\n      rule_visible: true,\r\n      rule_id: item.id,\r\n      rule_tree_name: item.parent_name?item.parent_name:'已是顶层结构'\r\n    },() => {\r\n      this.rule_formRef.current.setFieldsValue({\r\n        parent_id: item.parent_id,\r\n        rule_name: item.rule_name,\r\n        action_id: item.action_id,\r\n        rule_router: item.rule_router,\r\n        is_show: item.is_show,\r\n      })\r\n    })\r\n  }\r\n  // render渲染\r\n  render() {\r\n    return (\r\n      <div className={'rule'}>\r\n        <h2 className=\"rule-title\">权限管理</h2>\r\n        <div className=\"rule-btn\">\r\n          <Button type={'primary'} onClick={() => this.setState({rule_visible: true,rule_id: null})}>权限添加</Button>\r\n        </div>\r\n        <div className=\"rule-table\">\r\n          {\r\n            this.state.rule_list.length>0 &&  <Table\r\n              columns={this.rule_column}\r\n              pagination={false}\r\n              scroll={{ y: '63vh' }}\r\n              dataSource={this.state.rule_list}\r\n            />\r\n          }\r\n        </div>\r\n        <div className=\"rule-modal\">\r\n          {/*form弹窗*/}\r\n          <Modal\r\n            title={<ModalHeader title={'权限添加'} />}\r\n            closable={false}\r\n            visible={this.state.rule_visible}\r\n            centered\r\n            okText={'确认'}\r\n            afterClose={() => {\r\n              this.rule_formRef.current.resetFields();\r\n              this.setState({\r\n                rule_visible: false,\r\n                rule_tree_name: '点击选择父级权限',\r\n              })\r\n            }}\r\n            onOk={() => {\r\n              this.rule_formRef.current.submit()\r\n            }}\r\n            confirmLoading={this.state.rule_loading}\r\n            cancelText={'取消'}\r\n            onCancel={() => this.setState({rule_visible: false})}\r\n          >\r\n            <Form\r\n              ref={this.rule_formRef}\r\n              name={'form'}\r\n              validateMessages={this.rule_validateMessages}\r\n              labelCol={{span: 6}}\r\n              wrapperCol={{span: 16}}\r\n              onFinish={this.ruleSave.bind(this)}\r\n              initialValues={{\r\n                parent_id: null,\r\n                rule_name: null,\r\n                action_id: 1,\r\n                rule_router: null,\r\n                is_show: '1',\r\n              }}\r\n            >\r\n              <Form.Item label=\"父级权限\" >\r\n                <Button type=\"primary\" onClick={() => {\r\n                  this.setState({rule_tree_visible: true},() => this.rule_formRef.current.resetFields());\r\n                }}\r\n                  style={{borderColor: '#D9D9D9',textAlign: 'left',color: '#262626',padding: '4px 10px'}} ghost block>\r\n                  {\r\n                    this.state.rule_tree_name === '点击选择父级权限' || this.state.rule_tree_name === '已是顶层结构'?\r\n                    <span style={{color: '#BFBFBF'}}>{this.state.rule_tree_name}</span>:\r\n                    this.state.rule_tree_name\r\n                  }\r\n                </Button>\r\n                <Form.Item name=\"parent_id\" noStyle >\r\n                  <InputNumber placeholder={'请选择父级权限'} style={{display: 'none'}} />\r\n                </Form.Item>\r\n              </Form.Item>\r\n              <Form.Item label=\"权限名称\" name=\"rule_name\" rules={[{required: true}]}>\r\n                <Input placeholder={'请输权限名称'} />\r\n              </Form.Item>\r\n              <Form.Item label=\"权限标识\" name=\"action_id\" rules={[{required: true}]}>\r\n                <Select notFoundContent={<span>暂无内容</span>}>\r\n                  {\r\n                    this.state.rule_action_list.length > 0 &&\r\n                    this.state.rule_action_list.map((item,index) => (<Option key={`rule_${index}`} value={item.id}>{item.action_name}</Option>))\r\n                  }\r\n                </Select>\r\n              </Form.Item>\r\n              <Form.Item label=\"权限路由标识\" name=\"rule_router\" rules={[{required: true}]}>\r\n                <Input placeholder={'请输权限路由标识'} />\r\n              </Form.Item>\r\n              <Form.Item label=\"是否显示\" name=\"is_show\">\r\n                <Radio.Group>\r\n                  <Radio value={'1'}>是</Radio>\r\n                  <Radio value={'0'}>否</Radio>\r\n                </Radio.Group>\r\n              </Form.Item>\r\n            </Form>\r\n          </Modal>\r\n          {/*权限树弹窗*/}\r\n          <Modal\r\n            destroyOnClose={true}\r\n            title={<ModalHeader title={'父级权限选择'} />}\r\n            width={'30vw'}\r\n            centered\r\n            closable={false}\r\n            visible={this.state.rule_tree_visible}\r\n            footer={<Button type=\"primary\" ghost danger  onClick={() => this.setState({rule_tree_visible: false})}>关闭</Button>}\r\n            onCancel={() => this.setState({rule_tree_visible: false})}\r\n          >\r\n            <div className={'rule-tree-box'}>\r\n              <Tree\r\n                showLine={true}\r\n                onSelect={(key,info) => {\r\n                  this.setState({\r\n                    rule_tree_visible: false,\r\n                    rule_tree_name: info.selectedNodes[0].rule_name\r\n                  })\r\n                  this.rule_formRef.current.setFieldsValue({parent_id: info.selectedNodes[0].id})\r\n                }}\r\n                titleRender={(nodeData) => {\r\n                  return (<span>{nodeData.rule_name}</span>)\r\n                }}\r\n                treeData={this.state.rule_list}\r\n              />\r\n            </div>\r\n          </Modal>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","D:\\MyWebstorm\\react-rbi-website-admin\\src\\view\\Column\\Column.js",["99","100","101"],"/**\r\n * desc：  栏目管理\r\n * author：DestinyJun\r\n * date：  2020/4/21 17:01\r\n */\r\nimport React, {Component} from 'react';\r\nimport './Column.scss';\r\nimport {Button, Form, Image, Input, InputNumber, Modal, Radio, Space, Table, Tree} from \"antd\";\r\nimport {post} from \"../../service/Interceptor\";\r\nimport {ColumnApi} from \"../../service/Apis\";\r\nimport {reverseTree, transformTree} from \"../../service/tools\";\r\nimport {ModalHeader} from \"../../components/ModalHeader\";\r\nimport {Uploads} from \"../../components/Uploads\";\r\nimport {EyeOutlined} from '@ant-design/icons';\r\n\r\nexport class Column extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      column_list: [],\r\n      column_action_list: [],\r\n      column_visible: false,\r\n      column_loading: false,\r\n      column_tree_visible: false,\r\n      column_tree_name: '点击选择父级栏目',\r\n      column_id: null,\r\n      column_has_img: false,\r\n      column_default_img: [],\r\n    };\r\n    // 文件列表\r\n    this.column_files = [];\r\n    // 表单模型\r\n    this.column_formRef = React.createRef();\r\n    // 文件上传节点\r\n    this.column_uploadRef = React.createRef();\r\n    // 表头信息定义\r\n    this.column_column = [\r\n      {\r\n        title: '栏目名称',\r\n        dataIndex: 'column_name',\r\n      },\r\n      {\r\n        title: '是否有图片',\r\n        dataIndex: 'has_img',\r\n      },\r\n      {\r\n        title: '栏目顺序',\r\n        dataIndex: 'column_sort',\r\n      },\r\n      {\r\n        title: '创建时间',\r\n        dataIndex: 'create_time',\r\n      },\r\n      {\r\n        title: '操作',\r\n        render: (item) => {\r\n          return(\r\n            <Space size=\"middle\">\r\n              <Button type={'primary'} style={{background: '#00E3CA',borderColor: '#00E3CA'}} onClick={this.columnUpdate.bind(this,item)}>编辑</Button>\r\n              <Button type={'primary'} danger onClick={this.columnDel.bind(this,item)}>删除</Button>\r\n            </Space>\r\n          )\r\n        },\r\n      }\r\n    ]\r\n    // 校验信息定义\r\n    this.column_validateMessages = {\r\n      required: '${label}是必填项!',\r\n      types: {\r\n        number: '${label}必须是数字',\r\n      },\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    this.columnInit();\r\n  }\r\n  // 初始化树结构\r\n  columnInit() {\r\n    post(ColumnApi.GET_COLUMN_TREE, {})\r\n      .then(res => {\r\n        this.setState({\r\n          column_list: transformTree(reverseTree(res.data).map(item => ({...item,key: item.id}))),\r\n          column_visible: false,\r\n        })\r\n      })\r\n  }\r\n  // 添加/修改\r\n  columnSave () {\r\n    let url,data;\r\n    if (!this.state.column_id) {\r\n      url = ColumnApi.ADD_COLUMN;\r\n      data = this.column_formRef.current.getFieldsValue()\r\n    } else {\r\n      url = ColumnApi.UPDATE_COLUMN;\r\n      data = this.column_formRef.current.getFieldsValue();\r\n      data['id'] = this.state.column_id;\r\n    }\r\n    const formData = new FormData;\r\n    for (let key in data) {\r\n      if (data.hasOwnProperty(key)) {\r\n        if (!data[key]){\r\n          continue\r\n        }\r\n        formData.append(key, data[key])\r\n      }\r\n    }\r\n    if (this.column_files.length>0) {\r\n      this.column_files.forEach(item => {\r\n        formData.append('column_img[]', item.originFileObj)\r\n      })\r\n    }\r\n    post(url, formData)\r\n      .then(() => {\r\n        this.columnInit();\r\n      })\r\n      .catch(err => {})\r\n  }\r\n  // 删除\r\n  columnDel (item) {\r\n    if (window.confirm('确定要删除么?')) {\r\n      post(ColumnApi.DEL_COLUMN, {id: item.id})\r\n        .then(() => {\r\n          this.columnInit();\r\n        })\r\n        .catch(err => {})\r\n    }\r\n  }\r\n  // 修改\r\n  columnUpdate(item) {\r\n    const arr = [];\r\n    item.column_img.split(',').forEach((val,inx) => {\r\n      arr.push({\r\n        uid: `-${inx}`,\r\n        name: `原有图片-${inx}.png`,\r\n        status: 'done',\r\n        url: val,\r\n      })\r\n    })\r\n    this.setState({\r\n      column_visible: true,\r\n      column_id: item.id,\r\n      column_tree_name: item.parent_name?item.parent_name:'已是顶层栏目',\r\n      column_has_img: item.has_img === '1',\r\n      column_default_img: [...arr]\r\n    },() => {\r\n      this.column_formRef.current.setFieldsValue({\r\n        parent_id: item.parent_id,\r\n        column_name: item.column_name,\r\n        column_sort: item.column_sort,\r\n        has_img: item.has_img,\r\n      })\r\n    })\r\n  }\r\n  // radio改变\r\n  columnRadioChange = (info) => {\r\n    if (info.target.value === '1') {\r\n      this.setState({column_has_img: true})\r\n    } else {\r\n      this.setState({column_has_img: false})\r\n    }\r\n  }\r\n  // render渲染\r\n  render() {\r\n    return (\r\n      <div className={'column'}>\r\n        <h2 className=\"column-title\">栏目管理</h2>\r\n        <div className=\"column-btn\">\r\n          <Button type={'primary'} onClick={() => this.setState({column_visible: true,column_id: null},() => {\r\n            if (this.column_formRef.current.getFieldValue('has_img') === '1') {\r\n              this.setState({column_has_img: true})\r\n            }\r\n          })}>栏目添加</Button>\r\n        </div>\r\n        <div className=\"column-table\">\r\n          {\r\n            this.state.column_list.length>0 &&  <Table\r\n              columns={this.column_column}\r\n              pagination={false}\r\n              scroll={{ y: '63vh' }}\r\n              dataSource={this.state.column_list}\r\n            />\r\n          }\r\n        </div>\r\n        <div className=\"column-modal\">\r\n          {/*form弹窗*/}\r\n          <Modal\r\n            title={<ModalHeader title={'栏目操作'} />}\r\n            closable={false}\r\n            visible={this.state.column_visible}\r\n            centered\r\n            okText={'确认'}\r\n            afterClose={() => {\r\n              this.column_uploadRef.current.handleReset();\r\n              this.column_formRef.current.resetFields();\r\n              this.setState({\r\n                column_visible: false,\r\n                column_tree_name: '点击选择父级栏目',\r\n                column_default_img: []\r\n              })\r\n            }}\r\n            onOk={() => {\r\n              this.column_formRef.current.submit()\r\n            }}\r\n            confirmLoading={this.state.column_loading}\r\n            cancelText={'取消'}\r\n            onCancel={() => this.setState({column_visible: false})}\r\n          >\r\n            <Form\r\n              className={'form'}\r\n              ref={this.column_formRef}\r\n              name={'form'}\r\n              validateMessages={this.column_validateMessages}\r\n              labelCol={{span: 6}}\r\n              wrapperCol={{span: 16}}\r\n              onFinish={this.columnSave.bind(this)}\r\n              initialValues={{\r\n                column_name: null,\r\n                column_sort: 0,\r\n                has_img: '1',\r\n              }}\r\n            >\r\n              <Form.Item label=\"父级栏目\" >\r\n                <Button type=\"primary\" onClick={() => {\r\n                  this.setState({column_tree_visible: true},() => this.column_formRef.current.resetFields());\r\n                }}\r\n                        style={{borderColor: '#D9D9D9',textAlign: 'left',color: '#262626',padding: '4px 10px'}} ghost block>\r\n                  {\r\n                    this.state.column_tree_name === '点击选择父级栏目' || this.state.column_tree_name === '已是顶层栏目'?\r\n                      <span style={{color: '#BFBFBF'}}>{this.state.column_tree_name}</span>:\r\n                      this.state.column_tree_name\r\n                  }\r\n                </Button>\r\n                <Form.Item name=\"parent_id\" noStyle >\r\n                  <InputNumber placeholder={'请选择父级栏目'} style={{display: 'none'}} />\r\n                </Form.Item>\r\n              </Form.Item>\r\n              <Form.Item label=\"栏目名称\" name=\"column_name\" rules={[{required: true}]}>\r\n                <Input placeholder={'请输栏目名称'} />\r\n              </Form.Item>\r\n              <Form.Item label=\"栏目排序\" name=\"column_sort\" rules={[{required: true}]}>\r\n                <InputNumber placeholder={'栏目排序(越小越靠前）'} rules={[{types: 'number'}]} />\r\n              </Form.Item>\r\n              <Form.Item label=\"是否有图片\" name=\"has_img\">\r\n                <Radio.Group onChange={this.columnRadioChange}>\r\n                  <Radio value={'1'}>是</Radio>\r\n                  <Radio value={'0'}>否</Radio>\r\n                </Radio.Group>\r\n              </Form.Item>\r\n              <Form.Item label=\"图片上传\" hidden={!this.state.column_has_img}>\r\n                <Uploads ref={this.column_uploadRef} max={3} defaultFileList={this.state.column_default_img} onChange={(files) => {\r\n                  this.column_files = [...files];\r\n                  console.log(this.column_files);\r\n                }} />\r\n              </Form.Item>\r\n              <Form.Item label=\"当前图片\" hidden={!this.state.column_default_img.length>0}>\r\n                {\r\n                  this.state.column_default_img.map((item,index) =>(<\r\n                    Image key={`column_image_${index}`} style={{paddingRight: '5px'}} preview={{mask: <EyeOutlined />}} src={item.url} width={120} />))\r\n                }\r\n                <p style={{color: \"#FF4D4F\"}}>注意：一但上传新图片，原有的图片将会被删除</p>\r\n              </Form.Item>\r\n            </Form>\r\n          </Modal>\r\n          {/*栏目树弹窗*/}\r\n          <Modal\r\n            destroyOnClose={true}\r\n            title={<ModalHeader title={'父级栏目选择'} />}\r\n            width={'30vw'}\r\n            centered\r\n            closable={false}\r\n            visible={this.state.column_tree_visible}\r\n            footer={<Button type=\"primary\" ghost danger  onClick={() => this.setState({column_tree_visible: false})}>关闭</Button>}\r\n            onCancel={() => this.setState({column_tree_visible: false})}\r\n          >\r\n            <div className={'column-tree-box'}>\r\n              <Tree\r\n                showLine={true}\r\n                onSelect={(key,info) => {\r\n                  if (info.selectedNodes.length === 0) {\r\n                    this.column_formRef.current.resetFields();\r\n                    this.setState({\r\n                      column_tree_visible: false,\r\n                      column_tree_name: '点击选择父级栏目',\r\n                    })\r\n                  } else {\r\n                    this.setState({\r\n                      column_tree_visible: false,\r\n                      column_tree_name: info.selectedNodes[0].column_name\r\n                    })\r\n                    this.column_formRef.current.setFieldsValue({parent_id: info.selectedNodes[0].id})\r\n                  }\r\n                }}\r\n                titleRender={(nodeData) => {\r\n                  return (<span>{nodeData.column_name}</span>)\r\n                }}\r\n                treeData={this.state.column_list}\r\n              />\r\n            </div>\r\n          </Modal>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","D:\\MyWebstorm\\react-rbi-website-admin\\src\\view\\Home\\Home.js",[],"D:\\MyWebstorm\\react-rbi-website-admin\\src\\redux\\actionType.js",[],"D:\\MyWebstorm\\react-rbi-website-admin\\src\\redux\\action.js",[],"D:\\MyWebstorm\\react-rbi-website-admin\\src\\service\\tools.js",[],"D:\\MyWebstorm\\react-rbi-website-admin\\src\\components\\ModalHeader.js",[],"D:\\MyWebstorm\\react-rbi-website-admin\\src\\components\\Uploads.js",[],"D:\\MyWebstorm\\react-rbi-website-admin\\src\\view\\RuleAction\\RuleAction.js",["102","103"],"/**\r\n * desc：  权限标识管理\r\n * author：DestinyJun\r\n * date：  2020/4/21 17:01\r\n */\r\nimport React, {Component} from 'react';\r\nimport './RuleAction.scss';\r\nimport {Button, Form, Input, Modal, Space, Table} from \"antd\";\r\nimport {post} from \"../../service/Interceptor\";\r\nimport {RuleActionApi} from \"../../service/Apis\";\r\nimport {ModalHeader} from \"../../components/ModalHeader\";\r\n\r\nexport class RuleAction extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      rule_action_list: [],\r\n      rule_action_visible: false,\r\n      rule_action_loading: false,\r\n      rule_action_id: null,\r\n    };\r\n    // 表单模型\r\n    this.rule_action_formRef = React.createRef();\r\n    // 表头信息定义\r\n    this.rule_action_column = [\r\n      {\r\n        title: '权限标识名称',\r\n        dataIndex: 'action_name',\r\n      },\r\n      {\r\n        title: '权限标识编码',\r\n        dataIndex: 'action_code',\r\n      },\r\n      {\r\n        title: '创建时间',\r\n        dataIndex: 'create_time',\r\n      },\r\n      {\r\n        title: '操作',\r\n        render: (item) => {\r\n          return(\r\n            <Space size=\"middle\">\r\n              <Button type={'primary'} style={{background: '#00E3CA',borderColor: '#00E3CA'}} onClick={this.ruleUpdate.bind(this,item)}>编辑</Button>\r\n              <Button type={'primary'} danger onClick={this.ruleDel.bind(this,item)}>删除</Button>\r\n            </Space>\r\n          )\r\n        },\r\n      }\r\n    ]\r\n    // 校验信息定义\r\n    this.rule_action_validateMessages = {\r\n      required: '${label}是必填项!',\r\n      types: {\r\n        number: '${label}必须是数字',\r\n      },\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    this.ruleInit();\r\n  }\r\n  // 初始化树结构\r\n  ruleInit() {\r\n    post(RuleActionApi.GET_RULE_ACTION, {})\r\n      .then(res => {\r\n        this.setState({\r\n          rule_action_list: res.data.map(item =>({...item,key: item.id})),\r\n          rule_action_visible: false,\r\n        })\r\n      })\r\n  }\r\n  // 添加/修改\r\n  ruleSave () {\r\n    let url,data;\r\n    if (!this.state.rule_action_id) {\r\n      url = RuleActionApi.ADD_RULE_ACTION;\r\n      data = this.rule_action_formRef.current.getFieldsValue()\r\n    } else {\r\n      url = RuleActionApi.UPDATE_RULE_ACTION;\r\n      data = this.rule_action_formRef.current.getFieldsValue();\r\n      data['id'] = this.state.rule_action_id;\r\n    }\r\n    post(url, data)\r\n      .then(() => {\r\n        this.ruleInit();\r\n      })\r\n      .catch(err => {})\r\n  }\r\n  // 删除\r\n  ruleDel (item) {\r\n    if (window.confirm('确定要删除么?')) {\r\n      post(RuleActionApi.DEL_RULE_ACTION, {id: item.id})\r\n        .then(() => {\r\n          this.ruleInit();\r\n        })\r\n        .catch(err => {})\r\n    }\r\n  }\r\n  // 修改\r\n  ruleUpdate(item) {\r\n    this.setState({\r\n      rule_action_visible: true,\r\n      rule_action_id: item.id,\r\n    },() => {\r\n      this.rule_action_formRef.current.setFieldsValue({\r\n        action_name: item.action_name,\r\n        action_code: item.action_code\r\n      })\r\n    })\r\n  }\r\n  // render渲染\r\n  render() {\r\n    return (\r\n      <div className={'ruleAction'}>\r\n        <h2 className=\"rule-action-title\">权限标识管理</h2>\r\n        <div className=\"rule-action-btn\">\r\n          <Button type={'primary'} onClick={() => this.setState({rule_action_visible: true,rule_action_id: null})}>权限标识添加</Button>\r\n        </div>\r\n        <div className=\"rule-action-table\">\r\n          {\r\n            this.state.rule_action_list.length>0 &&  <Table\r\n              columns={this.rule_action_column}\r\n              pagination={false}\r\n              scroll={{ y: '63vh' }}\r\n              dataSource={this.state.rule_action_list}\r\n            />\r\n          }\r\n        </div>\r\n        <div className=\"rule-action-modal\">\r\n          {/*form弹窗*/}\r\n          <Modal\r\n            title={<ModalHeader title={'权限添加'} />}\r\n            closable={false}\r\n            visible={this.state.rule_action_visible}\r\n            centered\r\n            okText={'确认'}\r\n            afterClose={() => {\r\n              this.rule_action_formRef.current.resetFields();\r\n              this.setState({\r\n                rule_action_visible: false,\r\n              })\r\n            }}\r\n            onOk={() => {\r\n              this.rule_action_formRef.current.submit()\r\n            }}\r\n            confirmLoading={this.state.rule_action_loading}\r\n            cancelText={'取消'}\r\n            onCancel={() => this.setState({rule_action_visible: false})}\r\n          >\r\n            <Form\r\n              ref={this.rule_action_formRef}\r\n              name={'form'}\r\n              validateMessages={this.rule_action_validateMessages}\r\n              labelCol={{span: 6}}\r\n              wrapperCol={{span: 16}}\r\n              onFinish={this.ruleSave.bind(this)}\r\n              initialValues={{\r\n                action_name: null,\r\n                action_code: null,\r\n              }}\r\n            >\r\n              <Form.Item label=\"权限标识名称\" name=\"action_name\" rules={[{required: true}]}>\r\n                <Input placeholder={'请输权限标识名称'} />\r\n              </Form.Item>\r\n              <Form.Item label=\"权限标识编码\" name=\"action_code\" rules={[{required: true}]}>\r\n                <Input placeholder={'请输权限标识编码'} />\r\n              </Form.Item>\r\n            </Form>\r\n          </Modal>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","D:\\MyWebstorm\\react-rbi-website-admin\\src\\view\\NewsType\\NewsType.js",["104","105"],"/**\r\n * desc：  新闻类型管理\r\n * author：DestinyJun\r\n * date：  2020/4/21 17:01\r\n */\r\nimport React, {Component} from 'react';\r\nimport './NewsType.scss';\r\nimport {Button, Form, Input, Modal, Space, Table} from \"antd\";\r\nimport {post} from \"../../service/Interceptor\";\r\nimport {NewsTypeApi} from \"../../service/Apis\";\r\nimport {ModalHeader} from \"../../components/ModalHeader\";\r\n\r\nexport class NewsType extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      news_type_list: [],\r\n      news_type_visible: false,\r\n      news_type_loading: false,\r\n      news_type_id: null,\r\n    };\r\n    // 表单模型\r\n    this.news_type_formRef = React.createRef();\r\n    // 表头信息定义\r\n    this.news_type_column = [\r\n      {\r\n        title: '权限标识名称',\r\n        dataIndex: 'news_type',\r\n      },\r\n      {\r\n        title: '创建时间',\r\n        dataIndex: 'create_time',\r\n      },\r\n      {\r\n        title: '操作',\r\n        render: (item) => {\r\n          return(\r\n            <Space size=\"middle\">\r\n              <Button type={'primary'} style={{background: '#00E3CA',borderColor: '#00E3CA'}} onClick={this.ruleUpdate.bind(this,item)}>编辑</Button>\r\n              <Button type={'primary'} danger onClick={this.ruleDel.bind(this,item)}>删除</Button>\r\n            </Space>\r\n          )\r\n        },\r\n      }\r\n    ]\r\n    // 校验信息定义\r\n    this.news_type_validateMessages = {\r\n      required: '${label}是必填项!',\r\n      types: {\r\n        number: '${label}必须是数字',\r\n      },\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    this.ruleInit();\r\n  }\r\n  // 初始化树结构\r\n  ruleInit() {\r\n    post(NewsTypeApi.GET_NEWS_TYPE, {})\r\n      .then(res => {\r\n        this.setState({\r\n          news_type_list: res.data.map(item =>({...item,key: item.id})),\r\n          news_type_visible: false,\r\n        })\r\n      })\r\n  }\r\n  // 添加/修改\r\n  ruleSave () {\r\n    let url,data;\r\n    if (!this.state.news_type_id) {\r\n      url = NewsTypeApi.ADD_NEWS_TYPE;\r\n      data = this.news_type_formRef.current.getFieldsValue()\r\n    } else {\r\n      url = NewsTypeApi.UPDATE_NEWS_TYPE;\r\n      data = this.news_type_formRef.current.getFieldsValue();\r\n      data['id'] = this.state.news_type_id;\r\n    }\r\n    post(url, data)\r\n      .then(() => {\r\n        this.ruleInit();\r\n      })\r\n      .catch(err => {})\r\n  }\r\n  // 删除\r\n  ruleDel (item) {\r\n    if (window.confirm('确定要删除么?')) {\r\n      post(NewsTypeApi.DEL_NEWS_TYPE, {id: item.id})\r\n        .then(() => {\r\n          this.ruleInit();\r\n        })\r\n        .catch(err => {})\r\n    }\r\n  }\r\n  // 修改\r\n  ruleUpdate(item) {\r\n    this.setState({\r\n      news_type_visible: true,\r\n      news_type_id: item.id,\r\n    },() => {\r\n      this.news_type_formRef.current.setFieldsValue({\r\n        news_type: item.news_type,\r\n      })\r\n    })\r\n  }\r\n  // render渲染\r\n  render() {\r\n    return (\r\n      <div className={'news-type'}>\r\n        <h2 className=\"news-type-title\">新闻类型管理</h2>\r\n        <div className=\"news-type-btn\">\r\n          <Button type={'primary'} onClick={() => this.setState({news_type_visible: true,news_type_id: null})}>新闻类型添加</Button>\r\n        </div>\r\n        <div className=\"news-type-table\">\r\n          {\r\n            this.state.news_type_list.length>0 &&  <Table\r\n              columns={this.news_type_column}\r\n              pagination={false}\r\n              scroll={{ y: '63vh' }}\r\n              dataSource={this.state.news_type_list}\r\n            />\r\n          }\r\n        </div>\r\n        <div className=\"news-type-modal\">\r\n          {/*form弹窗*/}\r\n          <Modal\r\n            title={<ModalHeader title={'权限添加'} />}\r\n            closable={false}\r\n            visible={this.state.news_type_visible}\r\n            centered\r\n            okText={'确认'}\r\n            afterClose={() => {\r\n              this.news_type_formRef.current.resetFields();\r\n              this.setState({\r\n                news_type_visible: false,\r\n              })\r\n            }}\r\n            onOk={() => {\r\n              this.news_type_formRef.current.submit()\r\n            }}\r\n            confirmLoading={this.state.news_type_loading}\r\n            cancelText={'取消'}\r\n            onCancel={() => this.setState({news_type_visible: false})}\r\n          >\r\n            <Form\r\n              ref={this.news_type_formRef}\r\n              name={'form'}\r\n              validateMessages={this.news_type_validateMessages}\r\n              labelCol={{span: 6}}\r\n              wrapperCol={{span: 16}}\r\n              onFinish={this.ruleSave.bind(this)}\r\n              initialValues={{\r\n                news_type: null\r\n              }}\r\n            >\r\n              <Form.Item label=\"新闻类型名称\" name=\"news_type\" rules={[{required: true}]}>\r\n                <Input placeholder={'请输新闻类型管理'} />\r\n              </Form.Item>\r\n            </Form>\r\n          </Modal>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","D:\\MyWebstorm\\react-rbi-website-admin\\src\\view\\FlinkType\\FlinkType.js",["106","107"],{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","replacedBy":"111"},{"ruleId":"112","severity":1,"message":"113","line":63,"column":17,"nodeType":"114","messageId":"115","endLine":63,"endColumn":32},{"ruleId":"112","severity":1,"message":"113","line":65,"column":17,"nodeType":"114","messageId":"115","endLine":65,"endColumn":32},{"ruleId":"112","severity":1,"message":"113","line":68,"column":17,"nodeType":"114","messageId":"115","endLine":68,"endColumn":32},{"ruleId":"112","severity":1,"message":"113","line":70,"column":17,"nodeType":"114","messageId":"115","endLine":70,"endColumn":32},{"ruleId":"116","severity":1,"message":"117","line":98,"column":22,"nodeType":"118","messageId":"119","endLine":98,"endColumn":34,"fix":"120"},{"ruleId":"112","severity":1,"message":"113","line":52,"column":17,"nodeType":"114","messageId":"115","endLine":52,"endColumn":32},{"ruleId":"112","severity":1,"message":"113","line":54,"column":17,"nodeType":"114","messageId":"115","endLine":54,"endColumn":32},{"ruleId":"112","severity":1,"message":"113","line":48,"column":17,"nodeType":"114","messageId":"115","endLine":48,"endColumn":32},{"ruleId":"112","severity":1,"message":"113","line":50,"column":17,"nodeType":"114","messageId":"115","endLine":50,"endColumn":32},{"ruleId":"112","severity":1,"message":"113","line":48,"column":17,"nodeType":"114","messageId":"115","endLine":48,"endColumn":32},{"ruleId":"112","severity":1,"message":"113","line":50,"column":17,"nodeType":"114","messageId":"115","endLine":50,"endColumn":32},"no-native-reassign",["121"],"no-negated-in-lhs",["122"],"no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression","new-parens","Missing '()' invoking a constructor.","NewExpression","missing",{"range":"123","text":"124"},"no-global-assign","no-unsafe-negation",[2753,2753],"()"]